#include "../projection_engine/sprite.h"
#include "../game_const.h"
#include "../projection_engine/tex_manager.h"

#ifndef TEXTURE_STRING_H
#define TEXTURE_STRING_H

class TextureString : public Sprite {

  private:
    string message;
    float r;
    float g;
    float b;
    bool use_large;

  public:
    /**
     * Load the object onto the scene
     * float x
     * float y
     */
    TextureString(float, float, string);
    
    void setMessage(string);
    void useLarge();
    
    void color(float, float, float);
    
    /**
     * Define the physics properties of the object
     */
    void definePhysics(cpSpace*) {};
    
    /**
     * Display the string
     */
    void display();
};

const int LARGE_FONT_WIDTH=20;
const int LARGE_FONT_HEIGHT=45;

const int SMALL_FONT_WIDTH=11;
const int SMALL_FONT_HEIGHT=18;

const cpVect FONTMAP[] = {
  cpv(187, 0),
  cpv(198, 0),
  cpv(209, 0),
  cpv(220, 0),
  cpv(231, 0),
  cpv(242, 0),
  cpv(0, 18),
  cpv(11, 18),
  cpv(22, 18),
  cpv(33, 18),
  cpv(44, 18),
  cpv(55, 18),
  cpv(66, 18),
  cpv(77, 18),
  cpv(88, 18),
  cpv(99, 18),
  cpv(110, 18),
  cpv(121, 18),
  cpv(132, 18),
  cpv(143, 18),
  cpv(154, 18),
  cpv(165, 18),
  cpv(176, 18),
  cpv(187, 18),
  cpv(198, 18),
  cpv(209, 18),
  cpv(220, 18),
  cpv(231, 18),
  cpv(242, 18),
  cpv(0, 36),
  cpv(11, 36),
  cpv(22, 36),
  cpv(33, 36),
  cpv(44, 36),
  cpv(55, 36),
  cpv(66, 36),
  cpv(77, 36),
  cpv(88, 36),
  cpv(99, 36),
  cpv(110, 36),
  cpv(121, 36),
  cpv(132, 36),
  cpv(143, 36),
  cpv(154, 36),
  cpv(165, 36),
  cpv(176, 36),
  cpv(187, 36),
  cpv(198, 36),
  cpv(209, 36),
  cpv(220, 36),
  cpv(231, 36),
  cpv(242, 36),
  cpv(0, 54),
  cpv(11, 54),
  cpv(22, 54),
  cpv(33, 54),
  cpv(44, 54),
  cpv(55, 54),
  cpv(66, 54),
  cpv(77, 54),
  cpv(88, 54),
  cpv(99, 54),
  cpv(110, 54),
  cpv(121, 54),
  cpv(132, 54),
  cpv(143, 54),
  cpv(154, 54),
  cpv(165, 54),
  cpv(176, 54),
  cpv(187, 54),
  cpv(198, 54),
  cpv(209, 54),
  cpv(220, 54),
  cpv(231, 54),
  cpv(242, 54),
  cpv(0, 72),
  cpv(11, 72),
  cpv(22, 72),
  cpv(33, 72),
  cpv(44, 72),
  cpv(55, 72),
  cpv(66, 72),
  cpv(77, 72),
  cpv(88, 72),
  cpv(99, 72),
  cpv(110, 72),
  cpv(121, 72),
  cpv(132, 72),
  cpv(143, 72),
  cpv(154, 72),
  cpv(165, 72),
  cpv(176, 72),
  cpv(187, 72),
  cpv(198, 72),
  cpv(209, 72) 
};

const cpVect LARGE_FONTMAP[] = {
  cpv(432,0),
  cpv(456,0),
  cpv(480,0),
  cpv(0,40),
  cpv(24,40),
  cpv(48,40),
  cpv(72,40),
  cpv(96,40),
  cpv(120,40),
  cpv(144,40),
  cpv(168,40),
  cpv(192,40),
  cpv(216,40),
  cpv(240,40),
  cpv(264,40),
  cpv(288,40),
  cpv(312,40),
  cpv(336,40),
  cpv(360,40),
  cpv(384,40),
  cpv(408,40),
  cpv(432,40),
  cpv(456,40),
  cpv(480,40),
  cpv(0,80),
  cpv(24,80),
  cpv(48,80),
  cpv(72,80),
  cpv(96,80),
  cpv(120,80),
  cpv(144,80),
  cpv(168,80),
  cpv(192,80),
  cpv(216,80),
  cpv(240,80),
  cpv(264,80),
  cpv(288,80),
  cpv(312,80),
  cpv(336,80),
  cpv(360,80),
  cpv(384,80),
  cpv(408,80),
  cpv(432,80),
  cpv(456,80),
  cpv(480,80),
  cpv(0,120),
  cpv(24,120),
  cpv(48,120),
  cpv(72,120),
  cpv(96,120),
  cpv(120,120),
  cpv(144,120),
  cpv(168,120),
  cpv(192,120),
  cpv(216,120),
  cpv(240,120),
  cpv(264,120),
  cpv(288,120),
  cpv(312,120),
  cpv(336,120),
  cpv(360,120),
  cpv(384,120),
  cpv(408,120),
  cpv(432,120),
  cpv(456,120),
  cpv(480,120),
  cpv(0,160),
  cpv(24,160),
  cpv(48,160),
  cpv(72,160),
  cpv(96,160),
  cpv(120,160),
  cpv(144,160),
  cpv(168,160),
  cpv(192,160),
  cpv(216,160),
  cpv(240,160),
  cpv(264,160),
  cpv(288,160),
  cpv(312,160),
  cpv(336,160),
  cpv(360,160),
  cpv(384,160),
  cpv(408,160),
  cpv(432,160),
  cpv(456,160),
  cpv(480,160),
  cpv(0,200),
  cpv(24,200),
  cpv(48,200),
  cpv(72,200),
  cpv(96,200),
  cpv(120,200),
  cpv(144,200),
  cpv(168,200),
  cpv(192,200),
  cpv(216,200),
  cpv(240,200),
  cpv(264,200),
  cpv(288,200),
  cpv(312,200),
  cpv(336,200),
  cpv(360,200),
  cpv(384,200),
  cpv(408,200),
  cpv(432,200),
  cpv(456,200),
  cpv(480,200),
  cpv(0,240),
  cpv(24,240),
  cpv(48,240),
  cpv(72,240),
  cpv(96,240),
  cpv(120,240),
  cpv(144,240),
  cpv(168,240),
  cpv(192,240),
  cpv(216,240),
  cpv(240,240),
  cpv(264,240),
  cpv(288,240),
  cpv(312,240),
  cpv(336,240),
  cpv(360,240),
  cpv(384,240),
  cpv(408,240),
  cpv(432,240),
  cpv(456,240),
  cpv(480,240),
  cpv(0,280),
  cpv(24,280),
  cpv(48,280),
  cpv(72,280),
  cpv(96,280),
  cpv(120,280),
  cpv(144,280),
  cpv(168,280),
  cpv(192,280),
  cpv(216,280),
  cpv(240,280),
  cpv(264,280),
  cpv(288,280),
  cpv(312,280),
  cpv(336,280),
  cpv(360,280),
  cpv(384,280),
  cpv(408,280),
  cpv(432,280),
  cpv(456,280),
  cpv(480,280),
  cpv(0,320),
  cpv(24,320),
  cpv(48,320),
  cpv(72,320),
  cpv(96,320),
  cpv(120,320),
  cpv(144,320),
  cpv(168,320),
  cpv(192,320),
  cpv(216,320),
  cpv(240,320),
  cpv(264,320),
  cpv(288,320),
  cpv(312,320),
  cpv(336,320),
  cpv(360,320),
  cpv(384,320),
  cpv(408,320),
  cpv(432,320),
  cpv(456,320),
  cpv(480,320),
  cpv(0,360),
  cpv(24,360),
  cpv(48,360),
  cpv(72,360),
  cpv(96,360),
  cpv(120,360),
  cpv(144,360),
  cpv(168,360),
  cpv(192,360),
  cpv(216,360),
  cpv(240,360),
  cpv(264,360),
  cpv(288,360),
  cpv(312,360),
  cpv(336,360),
  cpv(360,360),
  cpv(384,360),
  cpv(408,360),
  cpv(432,360)
};

#endif